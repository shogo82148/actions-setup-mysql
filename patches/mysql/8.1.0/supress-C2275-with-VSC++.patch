diff --git a/router/src/routing/src/classic_frame.h b/router/src/routing/src/classic_frame.h
index ea10a20c197..62c0daed133 100644
--- a/router/src/routing/src/classic_frame.h
+++ b/router/src/routing/src/classic_frame.h
@@ -142,45 +142,8 @@ ClassicFrame::recv_msg<
     classic_protocol::borrowed::message::client::StmtExecute>(
     Channel *src_channel, ClassicProtocolState *src_protocol,
     classic_protocol::capabilities::value_type caps) {
-  using msg_type = classic_protocol::borrowed::message::client::StmtExecute;
-
-  auto read_res = ClassicFrame::recv_frame_sequence(src_channel, src_protocol);
-  if (!read_res) return stdx::make_unexpected(read_res.error());
-
-  const auto &recv_buf = src_channel->recv_plain_view();
-
-  auto frame_decode_res = classic_protocol::decode<
-      classic_protocol::frame::Frame<classic_protocol::borrowed::wire::String>>(
-      net::buffer(recv_buf), caps);
-  if (!frame_decode_res) {
-    return stdx::make_unexpected(frame_decode_res.error());
-  }
-
-  src_protocol->seq_id(frame_decode_res->second.seq_id());
-
-  auto decode_res = classic_protocol::decode<msg_type>(
-      net::buffer(frame_decode_res->second.payload().value()), caps,
-      [src_protocol](auto stmt_id)
-          -> stdx::expected<std::vector<msg_type::ParamDef>, std::error_code> {
-        const auto it = src_protocol->prepared_statements().find(stmt_id);
-        if (it == src_protocol->prepared_statements().end()) {
-          return stdx::make_unexpected(make_error_code(
-              classic_protocol::codec_errc::statement_id_not_found));
-        }
-
-        std::vector<msg_type::ParamDef> params;
-        params.reserve(it->second.parameters.size());
-
-        for (const auto &param : it->second.parameters) {
-          params.emplace_back(param.type_and_flags, std::string_view{},
-                              param.param_already_sent);
-        }
-
-        return params;
-      });
-  if (!decode_res) return stdx::make_unexpected(decode_res.error());
-
-  return decode_res->second;
+  return stdx::make_unexpected(
+      make_error_code(classic_protocol::codec_errc::statement_id_not_found));
 }
 
 #endif
