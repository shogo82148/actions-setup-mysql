diff --git a/cmake/FindLZ4.cmake b/cmake/FindLZ4.cmake
index e97dd63e2b0..48a7790afcd 100644
--- a/cmake/FindLZ4.cmake
+++ b/cmake/FindLZ4.cmake
@@ -1,9 +1,9 @@
-find_path(LZ4_INCLUDE_DIR NAMES lz4.h)
-find_library(LZ4_LIBRARY NAMES lz4)
+find_path(LZ4_INCLUDE_DIRS NAMES lz4.h)
+find_library(LZ4_LIBRARIES NAMES lz4)
 
 include(FindPackageHandleStandardArgs)
 FIND_PACKAGE_HANDLE_STANDARD_ARGS(
     LZ4 DEFAULT_MSG
-    LZ4_LIBRARY LZ4_INCLUDE_DIR)
+    LZ4_LIBRARIES LZ4_INCLUDE_DIRS)
 
-mark_as_advanced(LZ4_INCLUDE_DIR LZ4_LIBRARY)
+mark_as_advanced(LZ4_INCLUDE_DIRS LZ4_LIBRARIES)
diff --git a/cmake/FindLZO.cmake b/cmake/FindLZO.cmake
new file mode 100644
index 00000000000..04391bb4720
--- /dev/null
+++ b/cmake/FindLZO.cmake
@@ -0,0 +1,9 @@
+find_path(LZO_INCLUDE_DIRS NAMES lzo/lzo1x.h)
+find_library(LZO_LIBRARIES NAMES lzo2)
+
+include(FindPackageHandleStandardArgs)
+FIND_PACKAGE_HANDLE_STANDARD_ARGS(
+    LZO DEFAULT_MSG
+    LZO_LIBRARIES LZO_INCLUDE_DIRS)
+
+mark_as_advanced(LZO_INCLUDE_DIRS LZO_LIBRARIES)
diff --git a/cmake/FindSnappy.cmake b/cmake/FindSnappy.cmake
new file mode 100644
index 00000000000..1e99eb65a50
--- /dev/null
+++ b/cmake/FindSnappy.cmake
@@ -0,0 +1,9 @@
+find_path(SNAPPY_INCLUDE_DIRS NAMES snappy.h)
+find_library(SNAPPY_LIBRARIES NAMES snappy)
+
+include(FindPackageHandleStandardArgs)
+FIND_PACKAGE_HANDLE_STANDARD_ARGS(
+    Snappy DEFAULT_MSG
+    SNAPPY_LIBRARIES SNAPPY_INCLUDE_DIRS)
+
+mark_as_advanced(SNAPPY_INCLUDE_DIRS SNAPPY_LIBRARIES)
diff --git a/storage/oqgraph/cmake/FindJudy.cmake b/storage/oqgraph/cmake/FindJudy.cmake
index d9ecfdc4a4f..37aed8b631c 100644
--- a/storage/oqgraph/cmake/FindJudy.cmake
+++ b/storage/oqgraph/cmake/FindJudy.cmake
@@ -16,7 +16,7 @@
 # Once done this will define
 #
 #  Judy_FOUND - system has Judy
-#  Judy_INCLUDE_DIR - the Judy include directory
+#  Judy_INCLUDE_DIRS - the Judy include directory
 #  Judy_LIBRARIES - Link these to use Judy
 #  Judy_DEFINITIONS - Compiler switches required for using Judy
 
@@ -24,21 +24,21 @@ IF(MSVC)
   # For now, assume Judy built according to the above instructions
   if (NOT "$ENV{JUDY_ROOT}" STREQUAL "")
     # Avoid passing backslashes to _Boost_FIND_LIBRARY due to macro re-parsing.
-    string(REPLACE "\\" "/" Judy_INCLUDE_DIR_search $ENV{JUDY_ROOT}/src)
+    string(REPLACE "\\" "/" Judy_INCLUDE_DIRS_search $ENV{JUDY_ROOT}/src)
     string(REPLACE "\\" "/" Judy_LIBRARIES_search $ENV{JUDY_ROOT}/src)
   endif()
 ELSE(MSVC)
-  IF (Judy_INCLUDE_DIR AND Judy_LIBRARIES)
+  IF (Judy_INCLUDE_DIRS AND Judy_LIBRARIES)
       SET(Judy_FIND_QUIETLY TRUE)
-  ENDIF (Judy_INCLUDE_DIR AND Judy_LIBRARIES)
+  ENDIF (Judy_INCLUDE_DIRS AND Judy_LIBRARIES)
 ENDIF(MSVC)
 
-FIND_PATH(Judy_INCLUDE_DIR Judy.h PATHS ${Judy_INCLUDE_DIR_search})
+FIND_PATH(Judy_INCLUDE_DIRS Judy.h PATHS ${Judy_INCLUDE_DIRS_search})
 FIND_LIBRARY(Judy_LIBRARIES Judy PATHS ${Judy_LIBRARIES_search})
 
-IF (Judy_INCLUDE_DIR AND Judy_LIBRARIES)
+IF (Judy_INCLUDE_DIRS AND Judy_LIBRARIES)
   SET(Judy_FOUND TRUE)
-ELSE (Judy_INCLUDE_DIR AND Judy_LIBRARIES)
+ELSE (Judy_INCLUDE_DIRS AND Judy_LIBRARIES)
   SET(Judy_FOUND FALSE)
   if (MSVC)
     MESSAGE(STATUS "How to build Judy on Windows:")
@@ -51,7 +51,7 @@ ELSE (Judy_INCLUDE_DIR AND Judy_LIBRARIES)
     MESSAGE(STATUS "3. Execute the command: 'build'")
     MESSAGE(STATUS "4. Rerun this cmake with the environment variable: 'set JUDY_ROOT=x:\\path\\to\\judy'")
   endif(MSVC)
-ENDIF (Judy_INCLUDE_DIR AND Judy_LIBRARIES)
+ENDIF (Judy_INCLUDE_DIRS AND Judy_LIBRARIES)
 
 IF (Judy_FOUND)
   IF (NOT Judy_FIND_QUIETLY)
@@ -63,5 +63,5 @@ ELSE (Judy_FOUND)
   ENDIF (Judy_FIND_REQUIRED)
 ENDIF (Judy_FOUND)
 
-MARK_AS_ADVANCED(Judy_INCLUDE_DIR Judy_LIBRARIES)
+MARK_AS_ADVANCED(Judy_INCLUDE_DIRS Judy_LIBRARIES)
 
diff --git a/storage/rocksdb/CMakeLists.txt b/storage/rocksdb/CMakeLists.txt
index c45787edc76..315a3ddaabc 100644
--- a/storage/rocksdb/CMakeLists.txt
+++ b/storage/rocksdb/CMakeLists.txt
@@ -47,6 +47,9 @@ endif()
 IF (WIN32 AND CMAKE_SIZEOF_VOID_P EQUAL 4)
   SKIP_ROCKSDB_PLUGIN("32-Bit Windows are temporarily disabled")
 ENDIF()
+IF(MSVC_ARM64)
+ SKIP_ROCKSDB_PLUGIN("Windows ARM64 not supported")
+ENDIF()
 
 #
 # Also, disable on ARM64 when not Linux
@@ -77,6 +80,10 @@ ELSEIF (CMAKE_CXX_COMPILER_ID MATCHES "Clang")
     SKIP_ROCKSDB_PLUGIN("${OLD_COMPILER_MSG}")
   ENDIF()
   SET(CXX11_FLAGS "-std=c++11 -stdlib=libstdc++")
+  IF(MSVC)
+    # clang-cl does not work yet
+    SKIP_ROCKSDB_PLUGIN("Clang-cl is not supported")
+  ENDIF()
 ELSEIF(MSVC)
   IF (MSVC_VERSION LESS 1900)
     SKIP_ROCKSDB_PLUGIN("${OLD_COMPILER_MSG}")
@@ -125,7 +132,8 @@ SET(ROCKSDB_SE_SOURCES
 # This is a strong requirement coming from RocksDB. No conditional checks here.
 #ADD_DEFINITIONS(-DROCKSDB_PLATFORM_POSIX -DROCKSDB_LIB_IO_POSIX
 #)
-if(CMAKE_SYSTEM_PROCESSOR STREQUAL "riscv64")
+
+if (HAVE_GCC_C11_ATOMICS_WITH_LIBATOMIC)
   SET(ATOMIC_EXTRA_LIBS -latomic)
 else()
   SET(ATOMIC_EXTRA_LIBS)
@@ -208,29 +216,6 @@ TARGET_LINK_LIBRARIES(rocksdb_aux_lib ${ATOMIC_EXTRA_LIBS})
 
 
 TARGET_LINK_LIBRARIES(rocksdb rocksdb_aux_lib)
-  FIND_LIBRARY(LZ4_LIBRARY
-    NAMES liblz4${PIC_EXT}.a lz4
-    HINTS ${WITH_LZ4}/lib)
-
-IF(CMAKE_CXX_COMPILER_ID MATCHES "GNU" OR CMAKE_CXX_COMPILER_ID MATCHES "Clang")
-
-  # MARIAROCKS_NOT_YET: Add -frtti flag when compiling RocksDB files.
-  # TODO: is this the right way to do this?
-  #  - SQL layer and storage/rocksdb/*.cc are compiled with -fnortti
-  #  - RocksDB files are compiled with "-fnortti ... -frtti" 
-  #  - This causes RocksDB headers to be compiled with different settings:
-  #     = with RTTI when compiling RocksDB
-  #     = without RTTI when compiling storage/rocksdb/*.cc
-  # 
-  #  (facebook/mysql-5.6 just compiles everything without -f*rtti, which means
-  #  everything is compiled with -frtti) 
-  #
-  #  (also had to add -frtti above, because something that event_listener.cc
-  #  includes requires it. So, now everything in MariaRocks is compiled with
-  #  -frtti)
-  set_source_files_properties(event_listener.cc rdb_cf_options.cc rdb_sst_info.cc
-    PROPERTIES COMPILE_FLAGS -frtti)
-ENDIF()
 
 CHECK_FUNCTION_EXISTS(sched_getcpu  HAVE_SCHED_GETCPU)
 IF(HAVE_SCHED_GETCPU)
@@ -269,27 +254,30 @@ ADD_LIBRARY(rocksdb_tools STATIC
 MYSQL_ADD_EXECUTABLE(sst_dump rocksdb/tools/sst_dump.cc COMPONENT rocksdb-engine)
 TARGET_LINK_LIBRARIES(sst_dump rocksdblib)
 
-MYSQL_ADD_EXECUTABLE(mysql_ldb tools/mysql_ldb.cc COMPONENT rocksdb-engine)
-TARGET_LINK_LIBRARIES(mysql_ldb rocksdb_tools rocksdb_aux_lib)
+MYSQL_ADD_EXECUTABLE(mariadb-ldb tools/mysql_ldb.cc COMPONENT rocksdb-engine)
+TARGET_LINK_LIBRARIES(mariadb-ldb rocksdb_tools rocksdb_aux_lib dbug)
 
 CONFIGURE_FILE(${CMAKE_CURRENT_SOURCE_DIR}/myrocks_hotbackup.py
   ${CMAKE_CURRENT_BINARY_DIR}/myrocks_hotbackup @ONLY)
 INSTALL_SCRIPT(${CMAKE_CURRENT_BINARY_DIR}/myrocks_hotbackup COMPONENT rocksdb-engine)
 
-IF(CMAKE_CXX_COMPILER_ID MATCHES "GNU" OR CMAKE_CXX_COMPILER_ID MATCHES "Clang")
-  SET_TARGET_PROPERTIES(rocksdb_tools sst_dump mysql_ldb PROPERTIES COMPILE_FLAGS "-frtti -Wno-error")
-ENDIF()
 IF(MSVC)
   # RocksDB, the storage engine, overdoes "const" by adding
   # additional const qualifiers to parameters of the overriden virtual functions
   # This creates a lot of warnings, that we silence here.
   ADD_DEFINITIONS(/wd4373)
-
   # Some checks in C++ runtime that make debug build much slower
   ADD_DEFINITIONS(-D_ITERATOR_DEBUG_LEVEL=0)
+
+    # Temporarily disable "conversion from size_t .." warnings
+  IF(CMAKE_SIZEOF_VOID_P EQUAL 8)
+    SET(CMAKE_CXX_FLAGS "${CMAKE_CXX_FLAGS} /wd4267")
+  ENDIF()
+ELSEIF(CMAKE_CXX_COMPILER_ID MATCHES "GNU" OR CMAKE_CXX_COMPILER_ID MATCHES "Clang")
+  SET_TARGET_PROPERTIES(rocksdb_tools sst_dump mariadb-ldb PROPERTIES COMPILE_FLAGS "-Wno-error")
 ENDIF()
 
-IF(GIT_EXECUTABLE)
+IF(GIT_EXECUTABLE AND EXISTS ${CMAKE_CURRENT_SOURCE_DIR}/rocksdb/.git)
   EXECUTE_PROCESS(
     COMMAND ${GIT_EXECUTABLE} rev-parse HEAD
       WORKING_DIRECTORY ${CMAKE_CURRENT_SOURCE_DIR}/rocksdb
diff --git a/storage/rocksdb/build_rocksdb.cmake b/storage/rocksdb/build_rocksdb.cmake
index b1937344b9f..29b2d83a759 100644
--- a/storage/rocksdb/build_rocksdb.cmake
+++ b/storage/rocksdb/build_rocksdb.cmake
@@ -34,60 +34,49 @@ endif()
 
 # Optional compression libraries.
 
-foreach(compression_lib LZ4 BZip2 ZSTD snappy)
-  FIND_PACKAGE(${compression_lib})
-
-  SET(WITH_ROCKSDB_${compression_lib} AUTO CACHE STRING
-  "Build RocksDB  with ${compression_lib} compression. Possible values are 'ON', 'OFF', 'AUTO' and default is 'AUTO'")
-
-  if(${WITH_ROCKSDB_${compression_lib}} STREQUAL "ON"  AND NOT ${${compression_lib}_FOUND})
-    MESSAGE(FATAL_ERROR
-      "${compression_lib} library was not found, but WITH_ROCKSDB${compression_lib} option is ON.\
-      Either set WITH_ROCKSDB${compression_lib} to OFF, or make sure ${compression_lib} is installed")
-  endif()
-endforeach()
-
-if(LZ4_FOUND AND (NOT WITH_ROCKSDB_LZ4 STREQUAL "OFF"))
-  set(HAVE_ROCKSDB_LZ4 TRUE)
-  add_definitions(-DLZ4)
-  include_directories(${LZ4_INCLUDE_DIR})
-  list(APPEND THIRDPARTY_LIBS ${LZ4_LIBRARY})
-endif()
-ADD_FEATURE_INFO(ROCKSDB_LZ4 HAVE_ROCKSDB_LZ4 "LZ4 Compression in the RocksDB storage engine")
-
-if(BZIP2_FOUND AND (NOT WITH_ROCKSDB_BZip2 STREQUAL "OFF"))
-  set(HAVE_ROCKSDB_BZIP2 TRUE)
-  add_definitions(-DBZIP2)
-  include_directories(${BZIP2_INCLUDE_DIR})
-  list(APPEND THIRDPARTY_LIBS ${BZIP2_LIBRARIES})
-endif()
-ADD_FEATURE_INFO(ROCKSDB_BZIP2 HAVE_ROCKSDB_BZIP2 "BZIP2 Compression in the RocksDB storage engine")
-
-if(SNAPPY_FOUND  AND (NOT WITH_ROCKSDB_snappy STREQUAL "OFF"))
-  set(HAVE_ROCKSDB_SNAPPY TRUE)
-  add_definitions(-DSNAPPY)
-  include_directories(${snappy_INCLUDE_DIR})
-  list(APPEND THIRDPARTY_LIBS ${snappy_LIBRARIES})
-endif()
-ADD_FEATURE_INFO(ROCKSDB_SNAPPY HAVE_ROCKSDB_SNAPPY "Snappy Compression in the RocksDB storage engine")
-
 include(CheckFunctionExists)
-if(ZSTD_FOUND AND (NOT WITH_ROCKSDB_ZSTD STREQUAL "OFF"))
-  SET(CMAKE_REQUIRED_LIBRARIES zstd)
-  CHECK_FUNCTION_EXISTS(ZDICT_trainFromBuffer ZSTD_VALID)
-  UNSET(CMAKE_REQUIRED_LIBRARIES)
-  if (WITH_ROCKSDB_ZSTD STREQUAL "ON" AND NOT ZSTD_VALID)
+macro(check_lib package)
+  SET(WITH_ROCKSDB_${package} AUTO CACHE STRING
+        "Build RocksDB  with ${package} compression. Possible values are 'ON', 'OFF', 'AUTO' and default is 'AUTO'")
+
+  STRING(TOUPPER ${package} var)
+  IF (NOT ${WITH_ROCKSDB_${package}} STREQUAL "OFF")
+    FIND_PACKAGE(${package} QUIET)
+    SET(HAVE_ROCKSDB_${package} TRUE)
+    IF (${${package}_FOUND})
+      IF(${ARGC} GREATER 1)
+        SET(CMAKE_REQUIRED_LIBRARIES ${${var}_LIBRARIES})
+        CHECK_FUNCTION_EXISTS(${ARGV1} ${package}_VALID)
+        UNSET(CMAKE_REQUIRED_LIBRARIES)
+      ELSE()
+        SET(${package}_VALID TRUE)
+      ENDIF()
+    ENDIF()
+  ENDIF()
+  ADD_FEATURE_INFO(ROCKSDB_${package} HAVE_ROCKSDB_${package} "${package} Compression in the RocksDB storage engine")
+
+  IF(${${package}_VALID})
+    MESSAGE_ONCE(rocksdb_${package} "Found ${package}: ${${var}_LIBRARIES}")
+    add_definitions(-D${var})
+    include_directories(${${var}_INCLUDE_DIR})
+    list(APPEND THIRDPARTY_LIBS ${${var}_LIBRARIES})
+  ELSEIF(${${package}_FOUND})
+    MESSAGE_ONCE(rocksdb_${package} "Found unusable ${package}: ${${var}_LIBRARIES} [${ARGV1}]")
+  ELSE()
+    MESSAGE_ONCE(rocksdb_${package} "Could NOT find ${package}")
+  ENDIF()
+
+  IF (${WITH_ROCKSDB_${package}} STREQUAL "ON"  AND NOT ${${package}_FOUND})
     MESSAGE(FATAL_ERROR
-      "WITH_ROCKSDB_ZSTD is ON and ZSTD library was found, but the version needs to be >= 1.1.3")
+      "${package} library was not found, but WITH_ROCKSDB_${package} option is ON.\
+      Either set WITH_ROCKSDB_${package} to OFF, or make sure ${package} is installed")
   endif()
-  if (ZSTD_VALID)
-    set(HAVE_ROCKSDB_ZSTD TRUE)
-    add_definitions(-DZSTD)
-    include_directories(${ZSTD_INCLUDE_DIR})
-    list(APPEND THIRDPARTY_LIBS ${ZSTD_LIBRARY})
-  endif()
-endif()
-ADD_FEATURE_INFO(ROCKSDB_ZSTD HAVE_ROCKSDB_ZSTD "Zstandard Compression in the RocksDB storage engine")
+endmacro()
+
+check_lib(LZ4)
+check_lib(BZip2)
+check_lib(Snappy)
+check_lib(ZSTD ZDICT_trainFromBuffer)
 
 add_definitions(-DZLIB)
 list(APPEND THIRDPARTY_LIBS ${ZLIB_LIBRARY})
@@ -123,8 +112,8 @@ if(NOT WIN32)
 endif()
 
 include(CheckCCompilerFlag)
-# ppc64 or ppc64le
-if(CMAKE_SYSTEM_PROCESSOR MATCHES "ppc64")
+# ppc64 or ppc64le or powerpc64 (BSD)
+if(CMAKE_SYSTEM_PROCESSOR MATCHES "ppc64|powerpc64")
   CHECK_C_COMPILER_FLAG("-maltivec" HAS_ALTIVEC)
   if(HAS_ALTIVEC)
     message(STATUS " HAS_ALTIVEC yes")
@@ -138,7 +127,7 @@ if(CMAKE_SYSTEM_PROCESSOR MATCHES "ppc64")
     set(CMAKE_CXX_FLAGS "${CMAKE_CXX_FLAGS} -mcpu=power8")
   endif()
   ADD_DEFINITIONS(-DHAVE_POWER8 -DHAS_ALTIVEC)
-endif(CMAKE_SYSTEM_PROCESSOR MATCHES "ppc64")
+endif(CMAKE_SYSTEM_PROCESSOR MATCHES "ppc64|powerpc64")
 
 if(CMAKE_SYSTEM_PROCESSOR STREQUAL "riscv64")
  set(SYSTEM_LIBS ${SYSTEM_LIBS} -latomic)
@@ -174,7 +163,7 @@ find_package(Threads REQUIRED)
 if(WIN32)
   set(SYSTEM_LIBS ${SYSTEM_LIBS} Shlwapi.lib Rpcrt4.lib)
 else()
-  set(SYSTEM_LIBS ${CMAKE_THREAD_LIBS_INIT} ${LIBRT} ${LIBDL})
+  set(SYSTEM_LIBS ${CMAKE_THREAD_LIBS_INIT} ${LIBRT} ${CMAKE_DL_LIBS})
 endif()
 
 set(ROCKSDB_LIBS rocksdblib})
@@ -190,13 +179,6 @@ set(LIBS ${ROCKSDB_LIBS} ${THIRDPARTY_LIBS} ${SYSTEM_LIBS})
 #  Unit tests themselves:
 #  - *_test.cc
 #  - *_bench.cc
-#
-#  - table/mock_table.cc
-#  - utilities/cassandra/cassandra_compaction_filter.cc
-#  - utilities/cassandra/format.cc
-#  - utilities/cassandra/merge_operator.cc
-#  - utilities/cassandra/test_utils.cc
-#
 set(ROCKSDB_SOURCES
         cache/clock_cache.cc
         cache/lru_cache.cc
@@ -513,6 +495,5 @@ list(APPEND SOURCES ${CMAKE_CURRENT_BINARY_DIR}/build_version.cc)
 ADD_CONVENIENCE_LIBRARY(rocksdblib ${SOURCES})
 target_link_libraries(rocksdblib ${THIRDPARTY_LIBS} ${SYSTEM_LIBS})
 IF(CMAKE_CXX_COMPILER_ID MATCHES "GNU" OR CMAKE_CXX_COMPILER_ID MATCHES "Clang")
-  set_target_properties(rocksdblib PROPERTIES COMPILE_FLAGS "-fPIC -fno-builtin-memcmp -frtti -Wno-error")
+  set_target_properties(rocksdblib PROPERTIES COMPILE_FLAGS "-fPIC -fno-builtin-memcmp -Wno-error")
 endif()
-
