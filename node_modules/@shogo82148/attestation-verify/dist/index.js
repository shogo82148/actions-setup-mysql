"use strict";
var __createBinding = (this && this.__createBinding) || (Object.create ? (function(o, m, k, k2) {
    if (k2 === undefined) k2 = k;
    var desc = Object.getOwnPropertyDescriptor(m, k);
    if (!desc || ("get" in desc ? !m.__esModule : desc.writable || desc.configurable)) {
      desc = { enumerable: true, get: function() { return m[k]; } };
    }
    Object.defineProperty(o, k2, desc);
}) : (function(o, m, k, k2) {
    if (k2 === undefined) k2 = k;
    o[k2] = m[k];
}));
var __setModuleDefault = (this && this.__setModuleDefault) || (Object.create ? (function(o, v) {
    Object.defineProperty(o, "default", { enumerable: true, value: v });
}) : function(o, v) {
    o["default"] = v;
});
var __importStar = (this && this.__importStar) || (function () {
    var ownKeys = function(o) {
        ownKeys = Object.getOwnPropertyNames || function (o) {
            var ar = [];
            for (var k in o) if (Object.prototype.hasOwnProperty.call(o, k)) ar[ar.length] = k;
            return ar;
        };
        return ownKeys(o);
    };
    return function (mod) {
        if (mod && mod.__esModule) return mod;
        var result = {};
        if (mod != null) for (var k = ownKeys(mod), i = 0; i < k.length; i++) if (k[i] !== "default") __createBinding(result, mod, k[i]);
        __setModuleDefault(result, mod);
        return result;
    };
})();
Object.defineProperty(exports, "__esModule", { value: true });
exports.verify = verify;
const attestations_1 = require("./attestations");
const digest_1 = require("./digest");
const verification_1 = require("./verification");
const core = __importStar(require("@actions/core"));
async function verify(filename, opts) {
    const algorithm = opts.algorithm || "sha256";
    const digest = await (0, digest_1.calculateDigest)(filename, algorithm);
    const client = new attestations_1.Client({
        githubToken: opts.githubToken,
    });
    const attestations = await getRemoteAttestations(client, digest, opts);
    for (const attestation of attestations) {
        try {
            core.debug("verifying attestation...");
            const ret = await (0, verification_1.verifyBundle)(attestation.bundle);
            // verify the digest
            verifyDigest(ret.statement.subject, digest);
            // verify the repository owner
            const owner = opts.owner || opts.repository?.split("/")[0];
            if (owner &&
                ret.extensions.sourceRepositoryOwnerURI !==
                    `https://github.com/${owner}`) {
                throw new Error(`sourceRepositoryOwnerURI ${ret.extensions.sourceRepositoryOwnerURI} does not match ${owner}`);
            }
            // verify the repository
            if (opts.repository &&
                ret.extensions.sourceRepositoryURI !==
                    `https://github.com/${opts.repository}`) {
                throw new Error(`sourceRepositoryURI ${ret.extensions.sourceRepositoryURI} does not match ${opts.repository}`);
            }
            core.debug("verifying attestation succeeded.");
            core.debug(`sourceRepositoryURI: ${ret.extensions.sourceRepositoryURI}`);
            for (const entry of ret.bundle.verificationMaterial.tlogEntries) {
                core.debug(`Log Entry: https://search.sigstore.dev/?logIndex=${entry.logIndex}`);
            }
            return ret;
        }
        catch (e) {
            core.warning(`failed to verify attestation: ${e}, continue to next attestation`);
        }
    }
    throw new Error(`failed to verify ${filename}`);
}
function verifyDigest(subjects, digest) {
    for (const subject of subjects) {
        const [algorithm, rawDigest] = digest.split(":");
        if (subject.digest[algorithm] === rawDigest) {
            return;
        }
    }
    throw new Error(`digest ${digest} not found in the attestation`);
}
async function getRemoteAttestations(client, digest, opts) {
    // check if `repository` is set first because if `repository` has been set,
    // `owner` will be set using the value of `repository`.
    // If `repository` is not set, the field will remain empty.
    // It will not be populated using the value of `owner`.
    if (opts.repository) {
        return await client.getByRepoAndDigest(opts.repository, digest);
    }
    if (opts.owner) {
        return await client.getByOwnerAndDigest(opts.owner, digest);
    }
    throw new Error("either owner or repository must be set");
}
//# sourceMappingURL=index.js.map