"use strict";
var __createBinding = (this && this.__createBinding) || (Object.create ? (function(o, m, k, k2) {
    if (k2 === undefined) k2 = k;
    var desc = Object.getOwnPropertyDescriptor(m, k);
    if (!desc || ("get" in desc ? !m.__esModule : desc.writable || desc.configurable)) {
      desc = { enumerable: true, get: function() { return m[k]; } };
    }
    Object.defineProperty(o, k2, desc);
}) : (function(o, m, k, k2) {
    if (k2 === undefined) k2 = k;
    o[k2] = m[k];
}));
var __setModuleDefault = (this && this.__setModuleDefault) || (Object.create ? (function(o, v) {
    Object.defineProperty(o, "default", { enumerable: true, value: v });
}) : function(o, v) {
    o["default"] = v;
});
var __importStar = (this && this.__importStar) || (function () {
    var ownKeys = function(o) {
        ownKeys = Object.getOwnPropertyNames || function (o) {
            var ar = [];
            for (var k in o) if (Object.prototype.hasOwnProperty.call(o, k)) ar[ar.length] = k;
            return ar;
        };
        return ownKeys(o);
    };
    return function (mod) {
        if (mod && mod.__esModule) return mod;
        var result = {};
        if (mod != null) for (var k = ownKeys(mod), i = 0; i < k.length; i++) if (k[i] !== "default") __createBinding(result, mod, k[i]);
        __setModuleDefault(result, mod);
        return result;
    };
})();
Object.defineProperty(exports, "__esModule", { value: true });
exports.verifyBundle = verifyBundle;
const verify_1 = require("@sigstore/verify");
const bundle_1 = require("@sigstore/bundle");
const tuf = __importStar(require("@sigstore/tuf"));
const asn1js = __importStar(require("asn1js"));
const GitHubOidcIssuer = "https://token.actions.githubusercontent.com";
const oidIssuer = "1.3.6.1.4.1.57264.1.1";
const oidIssuerV2 = "1.3.6.1.4.1.57264.1.8";
// CI extensions
const oidBuildSignerURI = "1.3.6.1.4.1.57264.1.9";
const oidBuildSignerDigest = "1.3.6.1.4.1.57264.1.10";
const oidRunnerEnvironment = "1.3.6.1.4.1.57264.1.11";
const oidSourceRepositoryURI = "1.3.6.1.4.1.57264.1.12";
const oidSourceRepositoryDigest = "1.3.6.1.4.1.57264.1.13";
const oidSourceRepositoryRef = "1.3.6.1.4.1.57264.1.14";
const oidSourceRepositoryIdentifier = "1.3.6.1.4.1.57264.1.15";
const oidSourceRepositoryOwnerURI = "1.3.6.1.4.1.57264.1.16";
const oidSourceRepositoryOwnerIdentifier = "1.3.6.1.4.1.57264.1.17";
const oidBuildConfigURI = "1.3.6.1.4.1.57264.1.18";
const oidBuildConfigDigest = "1.3.6.1.4.1.57264.1.19";
const oidBuildTrigger = "1.3.6.1.4.1.57264.1.20";
const oidRunInvocationURI = "1.3.6.1.4.1.57264.1.21";
const oidSourceRepositoryVisibilityAtSigning = "1.3.6.1.4.1.57264.1.22";
async function verifyBundle(obj) {
    const bundle = (0, bundle_1.bundleFromJSON)(obj);
    const signedEntity = (0, verify_1.toSignedEntity)(bundle);
    const trustedRoot = await tuf.getTrustedRoot();
    const trustMaterial = (0, verify_1.toTrustMaterial)(trustedRoot);
    const verifier = new verify_1.Verifier(trustMaterial);
    verifier.verify(signedEntity, {
        extensions: { issuer: GitHubOidcIssuer },
    });
    // validate the bundle
    const content = bundle.content;
    if (content.$case !== "dsseEnvelope") {
        throw new Error("bundle content is not a dsse envelope");
    }
    const dsseEnvelope = content.dsseEnvelope;
    if (dsseEnvelope.payloadType !== "application/vnd.in-toto+json") {
        throw new Error("dsse envelope payload type is not in-toto");
    }
    const statement = JSON.parse(dsseEnvelope.payload.toString("utf-8"));
    // validate the certificate
    if (signedEntity.key.$case !== "certificate") {
        throw new Error("signed entity key is not a x509 certificate");
    }
    const certificate = signedEntity.key.certificate;
    const extensions = {
        issuer: parseDERString(certificate.extension(oidIssuerV2)?.value) ||
            certificate.extension(oidIssuer)?.value.toString("utf-8"),
        buildSignerURI: parseDERString(certificate.extension(oidBuildSignerURI)?.value),
        buildSignerDigest: parseDERString(certificate.extension(oidBuildSignerDigest)?.value),
        runnerEnvironment: parseDERString(certificate.extension(oidRunnerEnvironment)?.value),
        sourceRepositoryURI: parseDERString(certificate.extension(oidSourceRepositoryURI)?.value),
        sourceRepositoryDigest: parseDERString(certificate.extension(oidSourceRepositoryDigest)?.value),
        sourceRepositoryRef: parseDERString(certificate.extension(oidSourceRepositoryRef)?.value),
        sourceRepositoryIdentifier: parseDERString(certificate.extension(oidSourceRepositoryIdentifier)?.value),
        sourceRepositoryOwnerURI: parseDERString(certificate.extension(oidSourceRepositoryOwnerURI)?.value),
        sourceRepositoryOwnerIdentifier: parseDERString(certificate.extension(oidSourceRepositoryOwnerIdentifier)?.value),
        buildConfigURI: parseDERString(certificate.extension(oidBuildConfigURI)?.value),
        buildConfigDigest: parseDERString(certificate.extension(oidBuildConfigDigest)?.value),
        buildTrigger: parseDERString(certificate.extension(oidBuildTrigger)?.value),
        runInvocationURI: parseDERString(certificate.extension(oidRunInvocationURI)?.value),
        sourceRepositoryVisibilityAtSigning: parseDERString(certificate.extension(oidSourceRepositoryVisibilityAtSigning)?.value),
    };
    return { bundle, statement, extensions };
}
function parseDERString(val) {
    if (!val) {
        return undefined;
    }
    const asn1 = asn1js.fromBER(val);
    if (asn1.offset === -1 || !asn1.result) {
        throw new Error("unexpected error unmarshalling DER-encoded string");
    }
    if (asn1.result.blockLength !== val.byteLength) {
        throw new Error("unexpected trailing bytes in DER-encoded string");
    }
    if (!(asn1.result instanceof asn1js.PrintableString ||
        asn1.result instanceof asn1js.Utf8String)) {
        throw new Error("unsupported string type in DER-encoded data");
    }
    return asn1.result.valueBlock.value;
}
//# sourceMappingURL=verification.js.map