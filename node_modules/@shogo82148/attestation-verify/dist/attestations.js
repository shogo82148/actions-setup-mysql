"use strict";
var __createBinding = (this && this.__createBinding) || (Object.create ? (function(o, m, k, k2) {
    if (k2 === undefined) k2 = k;
    var desc = Object.getOwnPropertyDescriptor(m, k);
    if (!desc || ("get" in desc ? !m.__esModule : desc.writable || desc.configurable)) {
      desc = { enumerable: true, get: function() { return m[k]; } };
    }
    Object.defineProperty(o, k2, desc);
}) : (function(o, m, k, k2) {
    if (k2 === undefined) k2 = k;
    o[k2] = m[k];
}));
var __setModuleDefault = (this && this.__setModuleDefault) || (Object.create ? (function(o, v) {
    Object.defineProperty(o, "default", { enumerable: true, value: v });
}) : function(o, v) {
    o["default"] = v;
});
var __importStar = (this && this.__importStar) || (function () {
    var ownKeys = function(o) {
        ownKeys = Object.getOwnPropertyNames || function (o) {
            var ar = [];
            for (var k in o) if (Object.prototype.hasOwnProperty.call(o, k)) ar[ar.length] = k;
            return ar;
        };
        return ownKeys(o);
    };
    return function (mod) {
        if (mod && mod.__esModule) return mod;
        var result = {};
        if (mod != null) for (var k = ownKeys(mod), i = 0; i < k.length; i++) if (k[i] !== "default") __createBinding(result, mod, k[i]);
        __setModuleDefault(result, mod);
        return result;
    };
})();
Object.defineProperty(exports, "__esModule", { value: true });
exports.Client = void 0;
const http = __importStar(require("@actions/http-client"));
const core = __importStar(require("@actions/core"));
const nextPattern = /(?<=<)([\S]*)(?=>; rel="Next")/i;
class Client {
    httpClient;
    constructor(opts) {
        const userAgent = opts?.userAgent || "@shogo82148/attestation-verify";
        const headers = {
            accept: "application/vnd.github+json",
            "x-github-api-version": "2022-11-28",
        };
        if (opts?.githubToken) {
            headers.authorization = `Bearer ${opts.githubToken}`;
        }
        this.httpClient = new http.HttpClient(userAgent, [], {
            headers: headers,
        });
    }
    async getByRepoAndDigest(repo, digest) {
        const url = `https://api.github.com/repos/${repo}/attestations/${digest}`;
        return await this.get(url);
    }
    async getByOwnerAndDigest(owner, digest) {
        const url = `https://api.github.com/orgs/${owner}/attestations/${digest}`;
        return await this.get(url);
    }
    async get(url) {
        let pagesRemaining = true;
        let result = [];
        while (pagesRemaining) {
            core.debug(`get ${url}`);
            const response = await this.httpClient.getJson(url);
            if (response.statusCode !== 200) {
                throw new Error(`failed to get ${url}: ${response.statusCode}`);
            }
            if (response.result?.attestations) {
                result = result.concat(response.result.attestations);
            }
            // paging
            const linkHeader = typeof response.headers.link === "string"
                ? response.headers.link
                : response.headers.link?.join(", ");
            pagesRemaining = !!(linkHeader && linkHeader.includes('rel="next"'));
            if (pagesRemaining) {
                const match = linkHeader?.match(nextPattern);
                if (!match || !match[0]) {
                    throw new Error("Failed to extract the next URL from the link header");
                }
                url = match[0];
            }
        }
        return result;
    }
}
exports.Client = Client;
//# sourceMappingURL=attestations.js.map